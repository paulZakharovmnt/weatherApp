{"version":3,"sources":["components/Header/Settings/Settings.js","components/Header/Search/ListOfTheCities.js","core/searchCitiesByNameAPI.js","components/Header/Search/Search.js","components/Header/Header.js","core/fetchCurrentUserCityLocationData.js","core/fetchCityWeather.js","core/getCurrentCityDate.js","components/WeatherInfo/WeatherInfo.js","components/WeatherInfo/Dots.js","components/WeatherInfo/InfoScreen.js","core/getDayType.js","core/fetchCityTimeAndDateAPI.js","components/WarningMessage.js","components/Loader.js","components/Main.js","App.js","index.js"],"names":["Settings","toggleShowSettingsOnClick","toggleChangeTimeFormatOnClick","toggleChangeDegreesFormatOnClick","toggleAutoUpdateWeatherWhenChangingCityOnClick","autoUpdateWeather","show24hTime","showFahrenheit","className","icon","faTimes","onClick","size","checked","type","onChange","ListOfTheCities","list","submit","map","item","key","id","event","city","country","searchCityApi","searchCitiesByNameAPI","cityName","a","fetch","method","headers","then","resp","json","Search","handleAddCityWeatherAndDateOnClick","useState","userInput","setUserInput","listOfTheSuggestionCities","setListOfTheSuggestionCities","useEffect","timer","setTimeout","length","result","data","clearTimeout","value","placeholder","target","preventDefault","cityInfo","countryCode","lat","latitude","long","longitude","Header","showSearchBar","setShowSearchBar","showSettings","setShowSettings","faPlus","CSSTransition","in","timeout","mountOnEnter","unmountOnExit","classNames","faCog","api","fetchCurrentUserCityLocationData","coords","results","components","country_code","weatherApi","fetchCityWeather","cityCoord","temp","main","description","weather","catch","err","console","log","getCurrentCityDate","unixDate","Date","toLocaleString","weekday","year","month","day","WeatherInfo","cityDate","currentCityToShow","weatherInfo","cityWeather","toUpperCase","condition","weatherImage","imageSrc","Math","floor","tempType","cityTime","timeAndDate","time12","time24","undefined","date","alt","src","Dots","listOfTheCities","dotClass","dotClassGlowing","join","faCircle","InfoScreen","cityTimeAndDateInfo","handleShowPreviousCityOnClick","handleShowNextCityOnClick","handleUpdateCityWeatherAndTimeOnClick","handleDeleteCityFromListOnClick","faChevronLeft","faChevronRight","faRedoAlt","getDayType","currentCityTime","timeApi","fetchCityTimeAndDateAPI","dayTime","time_24","time_12","date_time_unix","WarningMessage","faExclamationTriangle","Loader","Main","currentUserGeoLocation","setCurrentUserGeoLocation","setListOfTheCities","setWeatherInfo","setCurrentCityToShow","isLoading","setIsLoading","setShowFahrenheit","setAutoUpdateWeather","setShow24hTime","cityIdToShow","indexOf","window","navigator","geolocation","getCurrentPosition","position","getFullCityInformation","cityWeatherResult","timeAndDateResult","cityWeatherDateAndCoords","includes","mainStyleClass","newCityList","filter","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4170454f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Settings = ({\r\n  toggleShowSettingsOnClick,\r\n  toggleChangeTimeFormatOnClick,\r\n  toggleChangeDegreesFormatOnClick,\r\n  toggleAutoUpdateWeatherWhenChangingCityOnClick,\r\n  autoUpdateWeather,\r\n  show24hTime,\r\n  showFahrenheit,\r\n}) => {\r\n  return (\r\n    <div className=\"black-cover\">\r\n      <div className=\"settings-cont\">\r\n        <div className=\"top-block\">\r\n          <h2>Settings</h2>\r\n          <FontAwesomeIcon\r\n            icon={faTimes}\r\n            onClick={toggleShowSettingsOnClick}\r\n            className=\"close-btn\"\r\n            size=\"3x\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"settings-block\">\r\n          <div className=\"check-box-container\">\r\n            <h4>Temperature:</h4>\r\n            <div className=\"temp-change\">\r\n              <h5>°C</h5>\r\n              <input\r\n                checked={showFahrenheit}\r\n                className=\"checkbox\"\r\n                type=\"checkbox\"\r\n                onChange={toggleChangeDegreesFormatOnClick}\r\n              />\r\n              <h5>°F</h5>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"check-box-container\">\r\n            <h4>Auto Update Weather, when switching the cities:</h4>\r\n            <div className=\"auto-update\">\r\n              <h5>Off</h5>\r\n              <input\r\n                checked={autoUpdateWeather}\r\n                className=\"checkbox\"\r\n                type=\"checkbox\"\r\n                onChange={toggleAutoUpdateWeatherWhenChangingCityOnClick}\r\n              />\r\n              <h5>On</h5>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"check-box-container\">\r\n            <h4>Time format: </h4>\r\n            <div className=\"time-format\">\r\n              <h5>12h</h5>\r\n              <input\r\n                checked={show24hTime}\r\n                className=\"checkbox\"\r\n                type=\"checkbox\"\r\n                onChange={toggleChangeTimeFormatOnClick}\r\n              />\r\n              <h5>24h</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\n\r\nconst ListOfTheCities = ({ list, submit }) => {\r\n  return (\r\n    <div className=\"listOfCities-box\">\r\n      <ul className=\"city-list\">\r\n        {list.map((item) => {\r\n          return (\r\n            <li key={item.id} onClick={(event) => submit(item, event)}>\r\n              <h4>{item.city}</h4> <h6>{item.country}</h6>\r\n              <hr />\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListOfTheCities;\r\n","let searchCityApi = {\r\n  base: \"https://wft-geo-db.p.rapidapi.com/v1/geo/cities?namePrefix=\",\r\n  key: \"f94ea70c7amsh93941eb1918691ep15f1ecjsn783eefb2ee1f\",\r\n};\r\n\r\nconst searchCitiesByNameAPI = async (cityName) =>\r\n  await fetch(`${searchCityApi.base}${cityName}&sort=-population`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\",\r\n      \"x-rapidapi-key\": `${searchCityApi.key}`,\r\n    },\r\n  }).then((resp) => resp.json());\r\nexport default searchCitiesByNameAPI;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ListOfTheCities from \"./ListOfTheCities\";\r\nimport searchCitiesByNameAPI from \"../../../core/searchCitiesByNameAPI\";\r\n\r\nconst Search = ({ handleAddCityWeatherAndDateOnClick }) => {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [listOfTheSuggestionCities, setListOfTheSuggestionCities] = useState(\r\n    null\r\n  );\r\n\r\n  const handleSubmitCityFromSearchOnClick = (item, event) => {\r\n    event.preventDefault();\r\n    const cityInfo = {\r\n      city: item.city,\r\n      country: item.countryCode,\r\n      lat: item.latitude,\r\n      long: item.longitude,\r\n    };\r\n    handleAddCityWeatherAndDateOnClick(cityInfo);\r\n    setUserInput(\"\");\r\n    setListOfTheSuggestionCities(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      if (userInput.length > 3) {\r\n        searchCitiesByNameAPI(userInput).then((result) => {\r\n          setListOfTheSuggestionCities(result.data);\r\n        });\r\n      }\r\n    }, 500);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [userInput]);\r\n  return (\r\n    <div className=\"input-box\">\r\n      <input\r\n        value={userInput}\r\n        placeholder=\"e.g. Moscow\"\r\n        onChange={(event) => {\r\n          setUserInput(event.target.value);\r\n        }}\r\n      />\r\n      {listOfTheSuggestionCities !== null && (\r\n        <ListOfTheCities\r\n          list={listOfTheSuggestionCities}\r\n          submit={handleSubmitCityFromSearchOnClick}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState } from \"react\";\r\nimport Settings from \"./Settings/Settings\";\r\nimport Search from \"./Search/Search\";\r\nimport \"./Header.css\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faCog } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Header = ({\r\n  handleAddCityWeatherAndDateOnClick,\r\n  toggleChangeTimeFormatOnClick,\r\n  toggleChangeDegreesFormatOnClick,\r\n  toggleAutoUpdateWeatherWhenChangingCityOnClick,\r\n  autoUpdateWeather,\r\n  show24hTime,\r\n  showFahrenheit,\r\n}) => {\r\n  const [showSearchBar, setShowSearchBar] = useState(false);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n\r\n  const toggleShowSettingsOnClick = () => {\r\n    setShowSettings(!showSettings);\r\n  };\r\n\r\n  const toggleShowSearchBarOnClick = () => {\r\n    setShowSearchBar(!showSearchBar);\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-container\">\r\n        <FontAwesomeIcon\r\n          className=\"add-btn\"\r\n          icon={faPlus}\r\n          size=\"3x\"\r\n          onClick={toggleShowSearchBarOnClick}\r\n        />\r\n\r\n        <CSSTransition\r\n          in={showSearchBar}\r\n          timeout={1000}\r\n          mountOnEnter\r\n          unmountOnExit\r\n          classNames=\"search-bar\"\r\n        >\r\n          <Search\r\n            handleAddCityWeatherAndDateOnClick={\r\n              handleAddCityWeatherAndDateOnClick\r\n            }\r\n          />\r\n        </CSSTransition>\r\n\r\n        <FontAwesomeIcon\r\n          className=\"settings-btn\"\r\n          icon={faCog}\r\n          size=\"3x\"\r\n          onClick={toggleShowSettingsOnClick}\r\n        />\r\n      </div>\r\n\r\n      <CSSTransition\r\n        in={showSettings}\r\n        timeout={400}\r\n        mountOnEnter\r\n        unmountOnExit\r\n        classNames=\"settings-animation\"\r\n      >\r\n        <Settings\r\n          toggleAutoUpdateWeatherWhenChangingCityOnClick={\r\n            toggleAutoUpdateWeatherWhenChangingCityOnClick\r\n          }\r\n          toggleChangeTimeFormatOnClick={toggleChangeTimeFormatOnClick}\r\n          toggleChangeDegreesFormatOnClick={toggleChangeDegreesFormatOnClick}\r\n          autoUpdateWeather={autoUpdateWeather}\r\n          show24hTime={show24hTime}\r\n          showFahrenheit={showFahrenheit}\r\n          toggleShowSettingsOnClick={toggleShowSettingsOnClick}\r\n        />\r\n      </CSSTransition>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const api = {\r\n  base: \"https://api.opencagedata.com/geocode/v1/json?\",\r\n  key: \"57362432e5a046ec9f4701c1cc13e47d\",\r\n};\r\n\r\nconst fetchCurrentUserCityLocationData = async (coords) =>\r\n  await fetch(\r\n    `${api.base}q=${coords.lat}+${coords.long}&language=en&key=${api.key}`\r\n  )\r\n    .then((resp) => resp.json())\r\n    .then((result) => ({\r\n      lat: coords.lat,\r\n      long: coords.long,\r\n      city: result.results[0].components.city,\r\n      country: result.results[0].components.country_code,\r\n    }));\r\n\r\nexport default fetchCurrentUserCityLocationData;\r\n","const weatherApi = {\r\n  key: \"21de0ba639198264b5c2844b14971f13\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\nconst fetchCityWeather = async (cityCoord) =>\r\n  await fetch(\r\n    `${weatherApi.base}weather?q=${cityCoord.city},${cityCoord.country}&appid=${weatherApi.key}`\r\n  )\r\n    .then((resp) => resp.json())\r\n    .then((result) => ({\r\n      temp: result.main.temp,\r\n      description: result.weather[0],\r\n    }))\r\n    .catch((err) => console.log(err));\r\n\r\nexport default fetchCityWeather;\r\n","const getCurrentCityDate = (unixDate) => {\r\n  let cityDateOptions = {\r\n    weekday: \"long\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  };\r\n  let cityDate = new Date(unixDate * 1000).toLocaleString(\r\n    \"en-US\",\r\n    cityDateOptions\r\n  );\r\n\r\n  return cityDate;\r\n};\r\n\r\nexport default getCurrentCityDate;\r\n","import React from \"react\";\r\nimport getCurrentCityDate from \"../../core/getCurrentCityDate\";\r\n\r\nconst WeatherInfo = ({\r\n  currentCityToShow,\r\n  weatherInfo,\r\n  showFahrenheit,\r\n  show24hTime,\r\n}) => {\r\n  const cityWeather = weatherInfo[currentCityToShow];\r\n  const country = cityWeather.coords.country.toUpperCase();\r\n  const condition = cityWeather.weather.description.description;\r\n  const weatherImage = cityWeather.weather.description.icon;\r\n  const imageSrc = `http://openweathermap.org/img/wn/${weatherImage}@2x.png`;\r\n\r\n  let temp = Math.floor(cityWeather.weather.temp - 273);\r\n  let tempType = \"°C\";\r\n  let cityTime = cityWeather.timeAndDate.time12;\r\n  let cityDate;\r\n\r\n  if (showFahrenheit) {\r\n    temp = Math.floor((temp / 5) * 9 + +32);\r\n    tempType = \"°F\";\r\n  }\r\n\r\n  if (show24hTime) {\r\n    cityTime = cityWeather.timeAndDate.time24;\r\n  }\r\n\r\n  if (cityWeather.timeAndDate.date !== undefined) {\r\n    cityDate = getCurrentCityDate(cityWeather.timeAndDate.date);\r\n  }\r\n\r\n  return (\r\n    <div className=\"full-info\">\r\n      <div className=\"location\">\r\n        {currentCityToShow}, {country}\r\n      </div>\r\n      <div className=\"date\">{cityDate}</div>\r\n      <p>Last update time: {cityTime} (local)</p>\r\n\r\n      <div className=\"weather-condition\">\r\n        <div className=\"temp\">\r\n          {temp}\r\n          {tempType}\r\n        </div>\r\n        <div className=\"weather-description\">{condition}</div>\r\n        <div className=\"more-info\">\r\n          <img alt=\"\" src={imageSrc} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Dots = ({ listOfTheCities, currentCityToShow }) => {\r\n  let dotClass = [\"circle-dot\", \"fas fa-circle\"];\r\n  let dotClassGlowing = [\"circle-dot\", \"fas fa-circle\", \"activated\"];\r\n\r\n  return (\r\n    <div className=\"dots-container\">\r\n      <ul>\r\n        {listOfTheCities.map((cityName) => {\r\n          return (\r\n            <li key={cityName} id={cityName}>\r\n              <FontAwesomeIcon\r\n                className={\r\n                  cityName === currentCityToShow\r\n                    ? dotClassGlowing.join(\" \")\r\n                    : dotClass.join(\" \")\r\n                }\r\n                icon={faCircle}\r\n                size=\"1x\"\r\n              />\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dots;\r\n","import React from \"react\";\r\nimport WeatherInfo from \"./WeatherInfo\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faRedoAlt,\r\n  faTimes,\r\n  faChevronLeft,\r\n  faChevronRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./WeatherInfo.css\";\r\nimport Dots from \"./Dots\";\r\n\r\nconst InfoScreen = ({\r\n  currentCityToShow,\r\n  cityTimeAndDateInfo,\r\n  weatherInfo,\r\n  handleShowPreviousCityOnClick,\r\n  handleShowNextCityOnClick,\r\n  handleUpdateCityWeatherAndTimeOnClick,\r\n  handleDeleteCityFromListOnClick,\r\n  showFahrenheit,\r\n  show24hTime,\r\n  listOfTheCities,\r\n}) => {\r\n  return (\r\n    <div className=\"weather-info\">\r\n      <div className=\"general-info-container\">\r\n        <FontAwesomeIcon\r\n          className=\"nav-btn faChevronLeft\"\r\n          icon={faChevronLeft}\r\n          size=\"4x\"\r\n          onClick={handleShowPreviousCityOnClick}\r\n        />\r\n        <WeatherInfo\r\n          currentCityToShow={currentCityToShow}\r\n          cityTimeAndDateInfo={cityTimeAndDateInfo}\r\n          weatherInfo={weatherInfo}\r\n          showFahrenheit={showFahrenheit}\r\n          show24hTime={show24hTime}\r\n        />\r\n\r\n        <FontAwesomeIcon\r\n          className=\" nav-btn faChevronRight\"\r\n          icon={faChevronRight}\r\n          size=\"4x\"\r\n          onClick={handleShowNextCityOnClick}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"deleteUpdate-container\">\r\n        <FontAwesomeIcon\r\n          className=\"update-btn\"\r\n          icon={faRedoAlt}\r\n          size=\"3x\"\r\n          onClick={handleUpdateCityWeatherAndTimeOnClick}\r\n        />\r\n        <Dots\r\n          listOfTheCities={listOfTheCities}\r\n          currentCityToShow={currentCityToShow}\r\n        />\r\n        <FontAwesomeIcon\r\n          className=\"delete-btn\"\r\n          icon={faTimes}\r\n          size=\"4x\"\r\n          onClick={handleDeleteCityFromListOnClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoScreen;\r\n","const getDayType = (currentCityTime) => {\r\n  let dayType;\r\n  if (currentCityTime > \"06\" && currentCityTime < \"11\") {\r\n    dayType = \"morning\";\r\n  } else if (currentCityTime > \"11\" && currentCityTime < \"19\") {\r\n    dayType = \"day\";\r\n  } else if (currentCityTime > \"19\" && currentCityTime < \"23\") {\r\n    dayType = \"evening\";\r\n  } else {\r\n    dayType = \"night\";\r\n  }\r\n  return dayType;\r\n};\r\n\r\nexport default getDayType;\r\n","import getDayType from \"../core/getDayType\";\r\n\r\nconst timeApi = {\r\n  key: \"cbbe33181e2b4c389ee8303db47d81b0\",\r\n  base: \"https://api.ipgeolocation.io/timezone?apiKey=\",\r\n};\r\n\r\nconst fetchCityTimeAndDateAPI = async ({ lat, long }) =>\r\n  await fetch(`${timeApi.base}${timeApi.key}&lat=${lat}&long=${long}`)\r\n    .then((resp) => resp.json())\r\n    .then((result) => {\r\n      const dayTime = getDayType(result.time_24);\r\n      return {\r\n        time24: result.time_24,\r\n        time12: result.time_12,\r\n        date: result.date_time_unix,\r\n        dayTime: dayTime,\r\n      };\r\n    });\r\n\r\nexport default fetchCityTimeAndDateAPI;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst WarningMessage = () => {\r\n  return (\r\n    <div className=\"no-cities-message\">\r\n      <FontAwesomeIcon\r\n        className=\"warning-btn\"\r\n        icon={faExclamationTriangle}\r\n        size=\"4x\"\r\n      />\r\n      <p>\r\n        If your app is not loading you current city weather, and can't load ANY\r\n        other city by using search - please, turn off your ad-block. There is no\r\n        Ads in this small application. Thank you :)\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WarningMessage;\r\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loading-page\">\r\n      <div className=\"spinner\">\r\n        <span className=\"loader\"></span>\r\n        Loading...\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Header from \"./Header/Header\";\r\nimport \"./Main.css\";\r\nimport fetchCurrentUserCityLocationData from \"../core/fetchCurrentUserCityLocationData\";\r\nimport fetchCityWeather from \"../core/fetchCityWeather\";\r\nimport InfoScreen from \"./WeatherInfo/InfoScreen\";\r\nimport fetchCityTimeAndDateAPI from \"../core/fetchCityTimeAndDateAPI\";\r\nimport WarningMessage from \"./WarningMessage\";\r\nimport Loader from \"./Loader\";\r\n\r\nconst Main = () => {\r\n  //****** General State */\r\n\r\n  const [currentUserGeoLocation, setCurrentUserGeoLocation] = useState(null);\r\n  const [listOfTheCities, setListOfTheCities] = useState([]);\r\n  const [weatherInfo, setWeatherInfo] = useState(null);\r\n  const [currentCityToShow, setCurrentCityToShow] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  //********* State for settings menu */\r\n\r\n  const [showFahrenheit, setShowFahrenheit] = useState(false);\r\n  const [autoUpdateWeather, setAutoUpdateWeather] = useState(false);\r\n  const [show24hTime, setShow24hTime] = useState(false);\r\n\r\n  let cityIdToShow = listOfTheCities.indexOf(currentCityToShow);\r\n\r\n  //***** Fetch Current User Location */\r\n\r\n  useEffect(() => {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) =>\r\n        setCurrentUserGeoLocation({\r\n          lat: position.coords.latitude,\r\n          long: position.coords.longitude,\r\n        }),\r\n      (err) => console.log(err)\r\n    );\r\n  }, []);\r\n\r\n  //****** Fetch Weather Info And Time Of Current User City */\r\n\r\n  useEffect(() => {\r\n    if (!currentUserGeoLocation) {\r\n      return;\r\n    }\r\n    fetchCurrentUserCityLocationData(currentUserGeoLocation).then((result) =>\r\n      handleAddCityWeatherAndDateOnClick(result)\r\n    );\r\n  }, [currentUserGeoLocation]);\r\n\r\n  //****** Auto-Update Effect If This Option is On by User */\r\n\r\n  useEffect(() => {\r\n    if (!autoUpdateWeather) {\r\n      return;\r\n    }\r\n    handleUpdateCityWeatherAndTimeOnClick();\r\n  }, [currentCityToShow, autoUpdateWeather]);\r\n\r\n  const getFullCityInformation = (\r\n    cityWeatherResult,\r\n    timeAndDateResult,\r\n    cityInfo\r\n  ) => {\r\n    const cityWeatherDateAndCoords = { ...weatherInfo };\r\n    cityWeatherDateAndCoords[cityInfo.city] = {\r\n      weather: cityWeatherResult,\r\n      timeAndDate: timeAndDateResult,\r\n      coords: cityInfo,\r\n    };\r\n    return cityWeatherDateAndCoords;\r\n  };\r\n\r\n  const handleAddCityWeatherAndDateOnClick = async (cityInfo) => {\r\n    setIsLoading(true);\r\n    const cityWeatherResult = await fetchCityWeather(cityInfo);\r\n    const timeAndDateResult = await fetchCityTimeAndDateAPI(cityInfo);\r\n\r\n    if (!listOfTheCities.includes(cityInfo.city)) {\r\n      setListOfTheCities([...listOfTheCities, cityInfo.city]);\r\n    }\r\n\r\n    const cityWeatherDateAndCoords = getFullCityInformation(\r\n      cityWeatherResult,\r\n      timeAndDateResult,\r\n      cityInfo\r\n    );\r\n\r\n    setWeatherInfo(cityWeatherDateAndCoords);\r\n    setCurrentCityToShow(cityInfo.city);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleUpdateCityWeatherAndTimeOnClick = async () => {\r\n    handleAddCityWeatherAndDateOnClick(weatherInfo[currentCityToShow].coords);\r\n  };\r\n\r\n  const handleDeleteCityFromListOnClick = () => {\r\n    const newCityList = listOfTheCities.filter(\r\n      (city) => city !== currentCityToShow\r\n    );\r\n    setListOfTheCities(newCityList);\r\n\r\n    if (listOfTheCities.length > 1) {\r\n      handleShowNextCityOnClick();\r\n    } else {\r\n      setCurrentCityToShow(null);\r\n    }\r\n  };\r\n\r\n  const handleShowNextCityOnClick = () => {\r\n    if (cityIdToShow === listOfTheCities.length - 1) {\r\n      setCurrentCityToShow(listOfTheCities[0]);\r\n    } else {\r\n      setCurrentCityToShow(listOfTheCities[cityIdToShow + +1]);\r\n    }\r\n  };\r\n\r\n  const handleShowPreviousCityOnClick = () => {\r\n    if (currentCityToShow === listOfTheCities[0]) {\r\n      setCurrentCityToShow(listOfTheCities[listOfTheCities.length - 1]);\r\n    } else {\r\n      setCurrentCityToShow(listOfTheCities[cityIdToShow - 1]);\r\n    }\r\n  };\r\n\r\n  const toggleChangeTimeFormatOnClick = () => {\r\n    setShow24hTime(!show24hTime);\r\n  };\r\n  const toggleChangeDegreesFormatOnClick = () => {\r\n    setShowFahrenheit(!showFahrenheit);\r\n  };\r\n  const toggleAutoUpdateWeatherWhenChangingCityOnClick = () => {\r\n    setAutoUpdateWeather(!autoUpdateWeather);\r\n  };\r\n\r\n  let mainStyleClass = [\"main\", \"default\"];\r\n\r\n  if (currentCityToShow !== null) {\r\n    mainStyleClass = [\r\n      \"main\",\r\n      weatherInfo[currentCityToShow].timeAndDate.dayTime,\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div className={mainStyleClass.join(\" \")}>\r\n      {isLoading && <Loader />}\r\n\r\n      <Header\r\n        handleAddCityWeatherAndDateOnClick={handleAddCityWeatherAndDateOnClick}\r\n        toggleChangeTimeFormatOnClick={toggleChangeTimeFormatOnClick}\r\n        toggleChangeDegreesFormatOnClick={toggleChangeDegreesFormatOnClick}\r\n        toggleAutoUpdateWeatherWhenChangingCityOnClick={\r\n          toggleAutoUpdateWeatherWhenChangingCityOnClick\r\n        }\r\n        showFahrenheit={showFahrenheit}\r\n        show24hTime={show24hTime}\r\n        autoUpdateWeather={autoUpdateWeather}\r\n      />\r\n\r\n      {currentCityToShow !== null ? (\r\n        <InfoScreen\r\n          weatherInfo={weatherInfo}\r\n          currentCityToShow={currentCityToShow}\r\n          showFahrenheit={showFahrenheit}\r\n          show24hTime={show24hTime}\r\n          listOfTheCities={listOfTheCities}\r\n          handleShowNextCityOnClick={handleShowNextCityOnClick}\r\n          handleShowPreviousCityOnClick={handleShowPreviousCityOnClick}\r\n          handleUpdateCityWeatherAndTimeOnClick={\r\n            handleUpdateCityWeatherAndTimeOnClick\r\n          }\r\n          handleDeleteCityFromListOnClick={handleDeleteCityFromListOnClick}\r\n        />\r\n      ) : (\r\n        <div className=\"warning-messages\">\r\n          <div className=\"no-cities-message\">\r\n            <h2>There is no cities to show. Try to find some</h2>\r\n          </div>\r\n          <WarningMessage />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
{"version":3,"sources":["components/Header/Settings/Settings.js","components/Header/Search/ListOfTheCities.js","core/searchCitiesByNameAPI.js","components/Header/Search/Search.js","components/Header/Header.js","core/fetchCurrentUserCityLocationData.js","core/fetchCityWeather.js","core/getCurrentCityDate.js","components/WeatherInfo/WeatherInfo.js","components/WeatherInfo/InfoScreen.js","core/getDayType.js","core/fetchCityTimeAndDateAPI.js","components/Main.js","App.js","index.js"],"names":["Settings","toggleShowSettingsOnClick","toggleChangeTimeFormatOnClick","toggleChangeDegreesFormatOnClick","toggleAutoUpdateWeatherWhenChangingCityOnClick","autoUpdateWeather","show24hTime","showFahrenheit","className","icon","faTimes","onClick","size","checked","type","onChange","ListOfTheCities","list","submit","map","item","key","id","event","city","country","searchCityApi","searchCitiesByNameAPI","cityName","a","fetch","method","headers","then","resp","json","Search","handleAddCityWeatherAndDateOnClick","useState","userInput","setUserInput","listOfTheSuggestionCities","setListOfTheSuggestionCities","useEffect","timer","setTimeout","length","result","data","clearTimeout","value","placeholder","target","preventDefault","cityInfo","countryCode","lat","latitude","long","longitude","Header","showSearchBar","setShowSearchBar","showSettings","setShowSettings","faPlus","faCog","api","fetchCurrentUserCityLocationData","coords","results","components","country_code","weatherApi","fetchCityWeather","cityCoord","temp","main","description","weather","catch","err","console","log","getCurrentCityDate","unixDate","Date","toLocaleString","weekday","year","month","day","WeatherInfo","cityDate","currentCityToShow","weatherInfo","cityWeather","toUpperCase","condition","weatherImage","imageSrc","Math","floor","tempType","cityTime","timeAndDate","time12","time24","undefined","date","alt","src","InfoScreen","cityTimeAndDateInfo","handleShowPreviousCityOnClick","handleShowNextCityOnClick","handleUpdateCityWeatherAndTimeOnClick","handleDeleteCityFromListOnClick","faChevronLeft","faChevronRight","faRedoAlt","getDayType","currentCityTime","timeApi","fetchCityTimeAndDateAPI","dayTime","time_24","time_12","date_time_unix","Main","currentUserGeoLocation","setCurrentUserGeoLocation","listOfTheCities","setListOfTheCities","setWeatherInfo","setCurrentCityToShow","setShowFahrenheit","setAutoUpdateWeather","setShow24hTime","cityIdToShow","indexOf","window","navigator","geolocation","getCurrentPosition","position","getFullCityInformation","cityWeatherResult","timeAndDateResult","cityWeatherDateAndCoords","includes","mainStyleClass","join","newCityList","filter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.403a600b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Settings = ({\r\n  toggleShowSettingsOnClick,\r\n  toggleChangeTimeFormatOnClick,\r\n  toggleChangeDegreesFormatOnClick,\r\n  toggleAutoUpdateWeatherWhenChangingCityOnClick,\r\n  autoUpdateWeather,\r\n  show24hTime,\r\n  showFahrenheit,\r\n}) => {\r\n  return (\r\n    <div className=\"settings-cont\">\r\n      <div className=\"top-block\">\r\n        <h2>Settings</h2>\r\n        <FontAwesomeIcon\r\n          icon={faTimes}\r\n          onClick={toggleShowSettingsOnClick}\r\n          className=\"close-btn\"\r\n          size=\"3x\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"check-box-container\">\r\n        <h4>Temperature:</h4>\r\n        <div className=\"temp-change\">\r\n          <h5>°C</h5>\r\n          <input\r\n            checked={showFahrenheit}\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            onChange={toggleChangeDegreesFormatOnClick}\r\n          />\r\n          <h5>°F</h5>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"check-box-container\">\r\n        <h4>Auto Update Weather, when switching the cities:</h4>\r\n        <div className=\"auto-update\">\r\n          <h5>Off</h5>\r\n          <input\r\n            checked={autoUpdateWeather}\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            onChange={toggleAutoUpdateWeatherWhenChangingCityOnClick}\r\n          />\r\n          <h5>On</h5>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"check-box-container\">\r\n        <h4>Time format: </h4>\r\n        <div className=\"time-format\">\r\n          <h5>12h</h5>\r\n          <input\r\n            checked={show24hTime}\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            onChange={toggleChangeTimeFormatOnClick}\r\n          />\r\n          <h5>24h</h5>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\n\r\nconst ListOfTheCities = ({ list, submit }) => {\r\n  return (\r\n    <div className=\"listOfCities-box\">\r\n      <ul className=\"city-list\">\r\n        {list.map((item) => {\r\n          return (\r\n            <li key={item.id} onClick={(event) => submit(item, event)}>\r\n              <h4>{item.city}</h4> {item.country}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListOfTheCities;\r\n","let searchCityApi = {\r\n  base: \"https://wft-geo-db.p.rapidapi.com/v1/geo/cities?namePrefix=\",\r\n  key: \"f94ea70c7amsh93941eb1918691ep15f1ecjsn783eefb2ee1f\",\r\n};\r\n\r\nconst searchCitiesByNameAPI = async (cityName) =>\r\n  await fetch(`${searchCityApi.base}${cityName}&sort=-population`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\",\r\n      \"x-rapidapi-key\": `${searchCityApi.key}`,\r\n    },\r\n  }).then((resp) => resp.json());\r\nexport default searchCitiesByNameAPI;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ListOfTheCities from \"./ListOfTheCities\";\r\nimport searchCitiesByNameAPI from \"../../../core/searchCitiesByNameAPI\";\r\n\r\nconst Search = ({ handleAddCityWeatherAndDateOnClick }) => {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [listOfTheSuggestionCities, setListOfTheSuggestionCities] = useState(\r\n    null\r\n  );\r\n\r\n  const handleSubmitCityFromSearchOnClick = (item, event) => {\r\n    event.preventDefault();\r\n    const cityInfo = {\r\n      city: item.city,\r\n      country: item.countryCode,\r\n      lat: item.latitude,\r\n      long: item.longitude,\r\n    };\r\n    handleAddCityWeatherAndDateOnClick(cityInfo);\r\n    setUserInput(\"\");\r\n    setListOfTheSuggestionCities(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      if (userInput.length > 3) {\r\n        searchCitiesByNameAPI(userInput).then((result) => {\r\n          setListOfTheSuggestionCities(result.data);\r\n        });\r\n      }\r\n    }, 500);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [userInput]);\r\n  return (\r\n    <div className=\"input-box\">\r\n      <input\r\n        value={userInput}\r\n        placeholder=\"e.g. Moscow\"\r\n        onChange={(event) => {\r\n          setUserInput(event.target.value);\r\n        }}\r\n      />\r\n      {listOfTheSuggestionCities !== null && (\r\n        <ListOfTheCities\r\n          list={listOfTheSuggestionCities}\r\n          submit={handleSubmitCityFromSearchOnClick}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState } from \"react\";\r\nimport Settings from \"./Settings/Settings\";\r\nimport Search from \"./Search/Search\";\r\nimport \"./Header.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faCog } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Header = ({\r\n  handleAddCityWeatherAndDateOnClick,\r\n  toggleChangeTimeFormatOnClick,\r\n  toggleChangeDegreesFormatOnClick,\r\n  toggleAutoUpdateWeatherWhenChangingCityOnClick,\r\n  autoUpdateWeather,\r\n  show24hTime,\r\n  showFahrenheit,\r\n}) => {\r\n  const [showSearchBar, setShowSearchBar] = useState(false);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n\r\n  const toggleShowSettingsOnClick = () => {\r\n    setShowSettings(!showSettings);\r\n  };\r\n\r\n  const toggleShowSearchBarOnClick = () => {\r\n    setShowSearchBar(!showSearchBar);\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-container\">\r\n        <FontAwesomeIcon\r\n          className=\"add-btn\"\r\n          icon={faPlus}\r\n          size=\"3x\"\r\n          onClick={toggleShowSearchBarOnClick}\r\n        />\r\n        {showSearchBar && (\r\n          <Search\r\n            handleAddCityWeatherAndDateOnClick={\r\n              handleAddCityWeatherAndDateOnClick\r\n            }\r\n          />\r\n        )}\r\n        <FontAwesomeIcon\r\n          className=\"settings-btn\"\r\n          icon={faCog}\r\n          size=\"3x\"\r\n          onClick={toggleShowSettingsOnClick}\r\n        />\r\n      </div>\r\n\r\n      {showSettings && (\r\n        <Settings\r\n          toggleAutoUpdateWeatherWhenChangingCityOnClick={\r\n            toggleAutoUpdateWeatherWhenChangingCityOnClick\r\n          }\r\n          toggleChangeTimeFormatOnClick={toggleChangeTimeFormatOnClick}\r\n          toggleChangeDegreesFormatOnClick={toggleChangeDegreesFormatOnClick}\r\n          autoUpdateWeather={autoUpdateWeather}\r\n          show24hTime={show24hTime}\r\n          showFahrenheit={showFahrenheit}\r\n          toggleShowSettingsOnClick={toggleShowSettingsOnClick}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const api = {\r\n  base: \"https://api.opencagedata.com/geocode/v1/json?\",\r\n  key: \"57362432e5a046ec9f4701c1cc13e47d\",\r\n};\r\n\r\nconst fetchCurrentUserCityLocationData = async (coords) =>\r\n  await fetch(\r\n    `${api.base}q=${coords.lat}+${coords.long}&language=en&key=${api.key}`\r\n  )\r\n    .then((resp) => resp.json())\r\n    .then((result) => ({\r\n      lat: coords.lat,\r\n      long: coords.long,\r\n      city: result.results[0].components.city,\r\n      country: result.results[0].components.country_code,\r\n    }));\r\n\r\nexport default fetchCurrentUserCityLocationData;\r\n","const weatherApi = {\r\n  key: \"21de0ba639198264b5c2844b14971f13\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\nconst fetchCityWeather = async (cityCoord) =>\r\n  await fetch(\r\n    `${weatherApi.base}weather?q=${cityCoord.city},${cityCoord.country}&appid=${weatherApi.key}`\r\n  )\r\n    .then((resp) => resp.json())\r\n    .then((result) => ({\r\n      temp: result.main.temp,\r\n      description: result.weather[0],\r\n    }))\r\n    .catch((err) => console.log(err));\r\n\r\nexport default fetchCityWeather;\r\n","const getCurrentCityDate = (unixDate) => {\r\n  let cityDateOptions = {\r\n    weekday: \"long\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  };\r\n  let cityDate = new Date(unixDate * 1000).toLocaleString(\r\n    \"en-US\",\r\n    cityDateOptions\r\n  );\r\n\r\n  return cityDate;\r\n};\r\n\r\nexport default getCurrentCityDate;\r\n","import React from \"react\";\r\nimport getCurrentCityDate from \"../../core/getCurrentCityDate\";\r\n\r\nconst WeatherInfo = ({\r\n  currentCityToShow,\r\n  weatherInfo,\r\n  showFahrenheit,\r\n  show24hTime,\r\n}) => {\r\n  const cityWeather = weatherInfo[currentCityToShow];\r\n  const country = cityWeather.coords.country.toUpperCase();\r\n  const condition = cityWeather.weather.description.description;\r\n  const weatherImage = cityWeather.weather.description.icon;\r\n  const imageSrc = `http://openweathermap.org/img/wn/${weatherImage}@2x.png`;\r\n\r\n  let temp = Math.floor(cityWeather.weather.temp - 273);\r\n  let tempType = \"°C\";\r\n  let cityTime = cityWeather.timeAndDate.time12;\r\n  let cityDate;\r\n\r\n  if (showFahrenheit) {\r\n    temp = Math.floor((temp / 5) * 9 + +32);\r\n    tempType = \"°F\";\r\n  }\r\n\r\n  if (show24hTime) {\r\n    cityTime = cityWeather.timeAndDate.time24;\r\n  }\r\n\r\n  if (cityWeather.timeAndDate.date !== undefined) {\r\n    cityDate = getCurrentCityDate(cityWeather.timeAndDate.date);\r\n  }\r\n\r\n  return (\r\n    <div className=\"full-info\">\r\n      <div className=\"location\">\r\n        {currentCityToShow}, {country}\r\n      </div>\r\n      <div className=\"date\">{cityDate}</div>\r\n      <p>Last update time: {cityTime} (local)</p>\r\n\r\n      <div className=\"weather-condition\">\r\n        <div className=\"temp\">\r\n          {temp}\r\n          {tempType}\r\n        </div>\r\n        <div className=\"weather-description\">{condition}</div>\r\n        <div className=\"more-info\">\r\n          <img alt=\"\" src={imageSrc} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","import React from \"react\";\r\nimport WeatherInfo from \"./WeatherInfo\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faRedoAlt,\r\n  faTimes,\r\n  faChevronLeft,\r\n  faChevronRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./WeatherInfo.css\";\r\n\r\nconst InfoScreen = ({\r\n  currentCityToShow,\r\n  cityTimeAndDateInfo,\r\n  weatherInfo,\r\n  handleShowPreviousCityOnClick,\r\n  handleShowNextCityOnClick,\r\n  handleUpdateCityWeatherAndTimeOnClick,\r\n  handleDeleteCityFromListOnClick,\r\n  showFahrenheit,\r\n  show24hTime,\r\n}) => {\r\n  return (\r\n    <div className=\"weather-info\">\r\n      <div className=\"general-info-container\">\r\n        <FontAwesomeIcon\r\n          className=\"nav-btn faChevronLeft\"\r\n          icon={faChevronLeft}\r\n          size=\"4x\"\r\n          onClick={handleShowPreviousCityOnClick}\r\n        />\r\n        <WeatherInfo\r\n          currentCityToShow={currentCityToShow}\r\n          cityTimeAndDateInfo={cityTimeAndDateInfo}\r\n          weatherInfo={weatherInfo}\r\n          showFahrenheit={showFahrenheit}\r\n          show24hTime={show24hTime}\r\n        />\r\n\r\n        <FontAwesomeIcon\r\n          className=\" nav-btn faChevronRight\"\r\n          icon={faChevronRight}\r\n          size=\"4x\"\r\n          onClick={handleShowNextCityOnClick}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"deleteUpdate-container\">\r\n        <FontAwesomeIcon\r\n          className=\"delete-btn\"\r\n          icon={faTimes}\r\n          size=\"4x\"\r\n          onClick={handleDeleteCityFromListOnClick}\r\n        />\r\n        <FontAwesomeIcon\r\n          className=\"update-btn\"\r\n          icon={faRedoAlt}\r\n          size=\"3x\"\r\n          onClick={handleUpdateCityWeatherAndTimeOnClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoScreen;\r\n","const getDayType = (currentCityTime) => {\r\n  let dayType;\r\n  if (currentCityTime > \"06\" && currentCityTime < \"11\") {\r\n    dayType = \"morning\";\r\n  } else if (currentCityTime > \"11\" && currentCityTime < \"19\") {\r\n    dayType = \"day\";\r\n  } else if (currentCityTime > \"19\" && currentCityTime < \"23\") {\r\n    dayType = \"evening\";\r\n  } else {\r\n    dayType = \"night\";\r\n  }\r\n  return dayType;\r\n};\r\n\r\nexport default getDayType;\r\n","import getDayType from \"../core/getDayType\";\r\n\r\nconst timeApi = {\r\n  key: \"cbbe33181e2b4c389ee8303db47d81b0\",\r\n  base: \"https://api.ipgeolocation.io/timezone?apiKey=\",\r\n};\r\n\r\nconst fetchCityTimeAndDateAPI = async ({ lat, long }) =>\r\n  await fetch(`${timeApi.base}${timeApi.key}&lat=${lat}&long=${long}`)\r\n    .then((resp) => resp.json())\r\n    .then((result) => {\r\n      const dayTime = getDayType(result.time_24);\r\n      return {\r\n        time24: result.time_24,\r\n        time12: result.time_12,\r\n        date: result.date_time_unix,\r\n        dayTime: dayTime,\r\n      };\r\n    });\r\n\r\nexport default fetchCityTimeAndDateAPI;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Header from \"./Header/Header\";\r\nimport \"./Main.css\";\r\nimport fetchCurrentUserCityLocationData from \"../core/fetchCurrentUserCityLocationData\";\r\nimport fetchCityWeather from \"../core/fetchCityWeather\";\r\nimport InfoScreen from \"./WeatherInfo/InfoScreen\";\r\nimport fetchCityTimeAndDateAPI from \"../core/fetchCityTimeAndDateAPI\";\r\n\r\nconst Main = () => {\r\n  //****** General State */\r\n\r\n  const [currentUserGeoLocation, setCurrentUserGeoLocation] = useState(null);\r\n  const [listOfTheCities, setListOfTheCities] = useState([]);\r\n  const [weatherInfo, setWeatherInfo] = useState(null);\r\n  const [currentCityToShow, setCurrentCityToShow] = useState(null);\r\n\r\n  //********* State for settings menu */\r\n\r\n  const [showFahrenheit, setShowFahrenheit] = useState(false);\r\n  const [autoUpdateWeather, setAutoUpdateWeather] = useState(false);\r\n  const [show24hTime, setShow24hTime] = useState(false);\r\n\r\n  let cityIdToShow = listOfTheCities.indexOf(currentCityToShow);\r\n\r\n  //***** Fetch Current User Location */\r\n\r\n  useEffect(() => {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) =>\r\n        setCurrentUserGeoLocation({\r\n          lat: position.coords.latitude,\r\n          long: position.coords.longitude,\r\n        }),\r\n      (err) => console.log(err)\r\n    );\r\n  }, []);\r\n\r\n  //****** Fetch Weather Info And Time Of Current User City */\r\n\r\n  useEffect(() => {\r\n    if (currentUserGeoLocation) {\r\n      fetchCurrentUserCityLocationData(currentUserGeoLocation).then((result) =>\r\n        handleAddCityWeatherAndDateOnClick(result)\r\n      );\r\n    }\r\n  }, [currentUserGeoLocation]);\r\n\r\n  //****** Auto-Update Effect If This Option is On by User */\r\n\r\n  useEffect(() => {\r\n    if (autoUpdateWeather) {\r\n      handleUpdateCityWeatherAndTimeOnClick();\r\n    }\r\n  }, [currentCityToShow]);\r\n\r\n  const getFullCityInformation = (\r\n    cityWeatherResult,\r\n    timeAndDateResult,\r\n    cityInfo\r\n  ) => {\r\n    const cityWeatherDateAndCoords = { ...weatherInfo };\r\n    cityWeatherDateAndCoords[cityInfo.city] = {\r\n      weather: cityWeatherResult,\r\n      timeAndDate: timeAndDateResult,\r\n      coords: cityInfo,\r\n    };\r\n    return cityWeatherDateAndCoords;\r\n  };\r\n\r\n  const handleAddCityWeatherAndDateOnClick = async (cityInfo) => {\r\n    const cityWeatherResult = await fetchCityWeather(cityInfo);\r\n    const timeAndDateResult = await fetchCityTimeAndDateAPI(cityInfo);\r\n\r\n    if (!listOfTheCities.includes(cityInfo.city)) {\r\n      setListOfTheCities([...listOfTheCities, cityInfo.city]);\r\n    }\r\n\r\n    const cityWeatherDateAndCoords = getFullCityInformation(\r\n      cityWeatherResult,\r\n      timeAndDateResult,\r\n      cityInfo\r\n    );\r\n\r\n    setWeatherInfo(cityWeatherDateAndCoords);\r\n    setCurrentCityToShow(cityInfo.city);\r\n  };\r\n\r\n  const handleUpdateCityWeatherAndTimeOnClick = async () => {\r\n    handleAddCityWeatherAndDateOnClick(weatherInfo[currentCityToShow].coords);\r\n  };\r\n\r\n  const handleDeleteCityFromListOnClick = () => {\r\n    const newCityList = listOfTheCities.filter(\r\n      (city) => city !== currentCityToShow\r\n    );\r\n    setListOfTheCities(newCityList);\r\n\r\n    if (listOfTheCities.length > 1) {\r\n      handleShowNextCityOnClick();\r\n    } else {\r\n      setCurrentCityToShow(null);\r\n    }\r\n  };\r\n\r\n  const handleShowNextCityOnClick = () => {\r\n    if (cityIdToShow === listOfTheCities.length - 1) {\r\n      setCurrentCityToShow(listOfTheCities[0]);\r\n    } else {\r\n      setCurrentCityToShow(listOfTheCities[cityIdToShow + +1]);\r\n    }\r\n  };\r\n\r\n  const handleShowPreviousCityOnClick = () => {\r\n    if (currentCityToShow === listOfTheCities[0]) {\r\n      setCurrentCityToShow(listOfTheCities[listOfTheCities.length - 1]);\r\n    } else {\r\n      setCurrentCityToShow(listOfTheCities[cityIdToShow - 1]);\r\n    }\r\n  };\r\n\r\n  const toggleChangeTimeFormatOnClick = () => {\r\n    setShow24hTime(!show24hTime);\r\n  };\r\n  const toggleChangeDegreesFormatOnClick = () => {\r\n    setShowFahrenheit(!showFahrenheit);\r\n  };\r\n  const toggleAutoUpdateWeatherWhenChangingCityOnClick = () => {\r\n    setAutoUpdateWeather(!autoUpdateWeather);\r\n  };\r\n\r\n  let mainStyleClass = [\"main\", \"default\"];\r\n\r\n  if (currentCityToShow !== null) {\r\n    mainStyleClass = [\r\n      \"main\",\r\n      weatherInfo[currentCityToShow].timeAndDate.dayTime,\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div className={mainStyleClass.join(\" \")}>\r\n      <Header\r\n        handleAddCityWeatherAndDateOnClick={handleAddCityWeatherAndDateOnClick}\r\n        toggleChangeTimeFormatOnClick={toggleChangeTimeFormatOnClick}\r\n        toggleChangeDegreesFormatOnClick={toggleChangeDegreesFormatOnClick}\r\n        toggleAutoUpdateWeatherWhenChangingCityOnClick={\r\n          toggleAutoUpdateWeatherWhenChangingCityOnClick\r\n        }\r\n        showFahrenheit={showFahrenheit}\r\n        show24hTime={show24hTime}\r\n        autoUpdateWeather={autoUpdateWeather}\r\n      />\r\n\r\n      {currentCityToShow !== null ? (\r\n        <InfoScreen\r\n          weatherInfo={weatherInfo}\r\n          currentCityToShow={currentCityToShow}\r\n          showFahrenheit={showFahrenheit}\r\n          show24hTime={show24hTime}\r\n          handleShowNextCityOnClick={handleShowNextCityOnClick}\r\n          handleShowPreviousCityOnClick={handleShowPreviousCityOnClick}\r\n          handleUpdateCityWeatherAndTimeOnClick={\r\n            handleUpdateCityWeatherAndTimeOnClick\r\n          }\r\n          handleDeleteCityFromListOnClick={handleDeleteCityFromListOnClick}\r\n        />\r\n      ) : (\r\n        <div className=\"no-cities-message\">\r\n          <h2>There is no cities to show. Try to find some</h2>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}